*** 8/30/23 ***

Threads:
    a thread is considered a basic unit of CPU work (an atomic unit of work?)
    a process (heavyweight process) is a task with 1 thread

    A thread (lightweight process):
    - has the same states as a process (new, ready, running, waiting, terminating)
    - has its own program counter, register set, and stack space
    - can create child threads
    - cannot be shared among different tasks
    - can share with peer threads, the tasks PCB information
    - allows more efficient CPU switching than context switching
    - is not always supported by the system (OS, library)

    When to use processes vs threads:
    - processes - when the processes are not related
    - processes - when the programming may be sloppy

    - threads - when the threads are related, the sharing of resources or I/O devices makes far a more efficient use of system resources
    - threads - when the threads are related, threads provide far a more efficient way of context switching between different threads
    - threads - given that threads share program resources, multi-thread synchronization is easier

    When to use kernel vs user level threads:
    - user level threads are (generally) supported via a library
    - user level threads provide the most efficient way of switching between tasks
    - user level threads make for easier synchronization
    - user level threads are more portable

    - kernel level threads are supported directly by the OS
    - kernel level threads provide better loading balancing or better sharing of the system resources between all tasks
    - kernel level threads prevent unnecessary blockages caused by OS system calls

    Since some OSs (solaris) provide both implementations of threads (what to use?) 

    you can type cast anything to a void pointer

    The secret:
    many functions pass void pointers (since the developer wasn't sure what you wanted to pass)