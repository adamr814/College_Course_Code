Process synchronization:

- processes are concurrent if they exist at the same time (includes processes in the ready queue and the cpu)
- processes are simultaneous (and concurrent) if they are executing at the same time (requires multiple processors)
- concurrent processes can function completely independent of each other, or they can be asynchronous (they require occasional synchronization and cooperation)
- a cooperating process is one that can affect or be affected by other processes executing in the system, this may be due to the use of a common data structure or use
of a parallel algorithm
- since we cannot guarantee any particular ordering of the execution of the cooperating processes, the resulting values in the shared resource may be dependent on the 
order of execution of the cooperating processes (race condition - a.k.a. lost update in database terms)

{Race condition}:
- Race condition (aka Lost Update) occurs when two processes that access the same resource have their operations interleaved in a way that makes the state/value of the
shared resource incorrect

- In some cases, it may be possible to use database serialization methods to insure data consistency. However, a direct application (i.e. 2 phase locking or graph
theoretic methods) of this approach would probably add too much overhead to be feasible for this application

- A simpler / more efficient approach is to synchronize the cooperating processes such that they cannot conflict. If they do conflict, we could end up in a state of
deadlock. However, if we are not careful our synchronization method may result in starvation.

{Critical Section}:
- any portion of a program where shared data resources are accessed is called a critical section. The "other" portions are called the remainder section(s)

- its is important to note that any given program may have several unrelated critical section and that these unrelated critical sections may require synchronization with
other different processes

Requirements - any solution to the critical section problem must satisfy the following:
- {Mutual exclusion} - only 1 program may be execution in its critical section at any given time. Programs not executing in their critical sections can continue without
interference
- {progress} - processes operating outside their critical sections cannot prevent other processes from entering their critical sections
- {bounded waiting} - processes cannot be indefinitely delayed from entering their critical section. if the process terminates while in its critical section some
method must be provided that releases the mutual exclusion rights held by the terminated process
- {performance} - no assumptions can be made about the relative performance of the involved programs

- Marsh is allergic to potassium (his heart stops?)

N-Process critical section
- Dijkstra - the first (1965) to present a software solution for implementation of an n-process mutual exclusion. however his method allowed the possibility of
indefinite postponement

- knuth - presented (1966) a software solution that eliminated the possibility of indefinite postponement. However, his method did not prevent the possibility
of lengthy delays

- Eisenberg and McGuire - Presented (1972) a solution for the critical section problem for N Processes. Teh algorithm organized the processes into a circle

- Lamport - presented the bakery (bakers) algorithm (1974) the algorithm uses the take a ticket method commonly found in bakeries, service counters, etc