*** 8/24/23 ***

Summary:
- the simple automaton, a finite state accepter of a language
    - a finite of internal states and no other memory
    - it process strings and either accept or reject them
    - a simple pattern recognition mechanism

- Deterministic finite automaton/Accepter (DFA)
    - Deterministic: the automaton has only one transition to the next state per symbol at one time
    - regular language

- Non-deterministic finite automaton/accepter (NFA)
    - nondeterministic: several transitions for a choice of next state
    - NFA explores all choices and makes no decision until all options have been analyzed
    - NFA simplifies the solution of many problems

- equivalence of DFA & NFA
- minimization of DFA & NFA

Learning objectives:
- describe the components of DFA
- state whether an input string is accepted by a DFA 
- describe the language accepted by a DFA 
- show that a particular language is regular
- describe the differences
- state whether an input string is accepted by NFA

DFA
- formal definition 2.1: A DFA is defined by the quintuple M = (Q, Σ, ẟ, q0, F)
where:
    - Q ~ a finite set of internal states 
    - Σ ~ a set of symbols called the input alphabet 
    - ẟ ~ Q x E -> Q ∀ q ∈ Σ
    - q0 set Q : the initial state
    - F (⊆ Q): a set of the final states


Processing input with DFA 
- a DFA starts by processing the leftmost input symbol of an input string with its control in state q0
- the transition function determines the next state, based on the current state and input symbol 
- the DFA continues processing input symbols until the end of the input string is reached
- the input string is accepted if the automaton is in a final state after the last symbol is processed otherwise its rejected

The language accepted by a DFA
- for a given DFA the extended transition function ẟ* accepts a DFA state and an input string as input, the value of the function
is the state of the automaton after the string is processed ẟ*: QxΣ* -> Q, s.t.
    - ẟ* (q, λ) = q, ∀ q ∈ Q 
    - ẟ* (q, wa) = ẟ(ẟ*(q, w), a), w ∈ Σ*, a ∈ Σ

*** 8/29/23 ***

the initial state is always denoted on a graph by the arrow pointing in
the final state is always denoted on a graph by double circles

- Def 2.2: the language accepted by a DFA M = (Q, Sigma, s, q0, F) is the set of all strings on sigma accepted by M 
    i.e. the set of all strings  whose transition results in a final state

    formally, L(M) = {w ∈ Σ* | s* (q0, w) ∈ F}

- note the language rejected by a DFA is L(M) with a bar on top

- Example 2.2: a DFA to accept the set of all strings on sigma = {a, b}, consisting of an arbitrary number of a's, followed
by a single b, i.e. L = ({a^nb | n >= 0} = {a..ab})

λ is an empty state

Regular languages
- finite automata accept a family of languages collectively known as regular languages
- def 2.3: a language L is regular if and only if there exists a DFA, M, that accepts L, i.e. L = L(M)
- to show that a language is regular one must construct a DFA to accept it
- Example: show that L = {(ab)^na | n > 0} is regular
    construct a DFA, M that accepts L 
    L = {aba, ababa, abababa, ...}
- regular languages have wide applicability in problems that involve scanning input strings in search of specific patterns
- lexical analysis

Nondeterministic Finite Automaton (NFA)
- an automaton is nondeterministic if it has a choice of actions for given inputs
- Def 2.4: A nondeterministic finite automata, NFA (or accepter, recognizer) is defined by the quintuple where Q, Σ, q0, F are defined as for DFA but
ẟ: Q x (Σ ∪ λ) -> 2^Q (i.e. P(Q))

- Example 2.7: a nondeterministic

- Example 2.8: a NFA which contains both a λ-transition as well as undefined transitions
ẟ(q0, λ) = {q2} and s(q0, 0) = ∅

the language accepted by an NFA
- for a given NFA, the value of the extended transition function s*(qi, w) is the set of all possible states for the control unit after
processing w, having started in qi
- ẟ* for the NFA in ex 2.8

ẟ*(q0, 10) = {q0, q2}
ẟ*(q0, 101) = {q1}
ẟ*(q0, λ) = {q0, q2} cf

- a string w is accepted if s*(q0, w) contains a final state
- in ex 2.8 10 would be accepted by 101 would be rejected
- Definition: the language accepted by a NFA M is the set of all accepted strings: L(M) = {w | ẟ*(q0, w) ∩ F != ∅}
- The NFA in ex 2.8 accepts L = {(10)^n | n >= 0} <- (with this language)
~ in example 2.8 there is a redundant part of the graph which doesn't really make sense so it can be removed to make a simpler graph.

equivalence of DFA and NFA

- does nondeterminism make it possible to accept languages that DFA cannot recognize?
- theorem 2.2
    let L be the language accepted by a NFA M/N = (Q, sigma, delta, q0, F)
    then there exists a DFA M/D = (Q', sigma delta', q0', F')
        where Q' set or equal P(Q), q0' = {q0}
        F' set or equal P(Q/F)
